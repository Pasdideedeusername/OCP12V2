export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "ContactRestRessource",
        "fileName": "ContactRestRessource.html",
        "text": "ContactRestRessource Cette classe Apex définit des services REST pour la manipulation des objets Contact dans Salesforce. Elle prend en charge les opérations de mise à jour en vrac des champs et de désactivation des contacts. REMARQUE: Les champs ExternalId__c et IsActive__c champs customs qui doivent avoir été créés au préalable. Signature @RestResource(urlMapping='/Contact/*') global with sharing class ContactRestRessource Author Carine Flood @version 1.0 Since 2023-11-14 ContactRestRessource Methods deletedContactWillBeDeactivated() Désactive en masse les contacts en fonction des données fournies. Endpoint: /services/apexrest/Contact/ Méthode: DELETE Corps de la requête: { \"records\": [ { \"ExternalId__c\": \"externalId fourni par AGX\" },{ \"ExternalId__c\": \"externalId fourni par AGX\" }] } updateContactFields() Met à jour en masse les champs des contacts, ou crée de nouveaux contacts(upsert) en fonction des données fournies. Exemple d'utilisation: - Mise à jour ou création(upsert) en vrac de contacts: Endpoint: /services/apexrest/Contact/ Méthode: PUT Expemple de corps de la requête: { \"records\": [ { \"ExternalId__c\": \"externalId fourni par AGX\", \"FirstName\": \"NouveauPrénom\", \"LastName\": \"NouveauNom\" }, { \"ExternalId\": \"\"externalId fourni par AGX\"\", \"Email\": \"nouveau@email.com\" }] } deletedContactWillBeDeactivated() Désactive en masse les contacts en fonction des données fournies. Endpoint: /services/apexrest/Contact/ Méthode: DELETE Corps de la requête: { \"records\": [ { \"ExternalId__c\": \"externalId fourni par AGX\" },{ \"ExternalId__c\": \"externalId fourni par AGX\" }] } Signature @HttpDelete global static void deletedContactWillBeDeactivated() updateContactFields() Met à jour en masse les champs des contacts, ou crée de nouveaux contacts(upsert) en fonction des données fournies. Exemple d'utilisation: - Mise à jour ou création(upsert) en vrac de contacts: Endpoint: /services/apexrest/Contact/ Méthode: PUT Expemple de corps de la requête: { \"records\": [ { \"ExternalId__c\": \"externalId fourni par AGX\", \"FirstName\": \"NouveauPrénom\", \"LastName\": \"NouveauNom\" }, { \"ExternalId\": \"\"externalId fourni par AGX\"\", \"Email\": \"nouveau@email.com\" }] } Signature @HttpPut global static List<Map<String, String>> updateContactFields() Returns Liste des informations des contacts mis à jour."
    },
    {
        "title": "ContactRestRessourceTest",
        "fileName": "ContactRestRessourceTest.html",
        "text": "ContactRestRessourceTest Classe de test pour la classe ContactRestRessource. Cette classe de test vérifie le comportement des méthodes de la classe ContactRestRessource. Signature @isTest private class ContactRestRessourceTest ContactRestRessourceTest Methods testDeletedContactWillBeDeactivated() testUpdateContactFields() testDeletedContactWillBeDeactivated() Signature @isTest static void testDeletedContactWillBeDeactivated() testUpdateContactFields() Signature @isTest static void testUpdateContactFields()"
    },
    {
        "title": "ContractRestResource",
        "fileName": "ContractRestResource.html",
        "text": "ContractRestResource Signature @RestResource(urlMapping='/Contract/*') global with sharing class ContractRestResource ContractRestResource Methods createContract() Crée un ou plusieurs contrats en utilisant une requête HTTP POST. Cette méthode récupère les informations de la demande HTTP entrante, y compris les données JSON contenant les détails des contrats à créer. Elle valide et traite les données, puis crée les contrats correspondants dans Salesforce. Elle renvoie une liste d'informations sur les contrats créés, y compris leur ID et l'ID du compte associé. Voici un exemple de corps de requète: { \"records\" : [{ \"AccountId\" : \"0012o00003PqKn1AAF\", \"StartDate\" : \"2023-11-05\", \"Status\" : \"Draft\", \"ContractTerm\" : \"3\" }] } updateContractFields() Cette méthode met à jour les champs d'un contrat existant en utilisant une requête HTTP PATCH. récupère les informations de la demande HTTP entrante, y compris l'ID du contrat à mettre à jour et les données JSON contenant les nouvelles valeurs des champs. Elle effectue ensuite la mise à jour des champs du contrat et enregistre les modifications dans Salesforce. Cette méthode n'est pas \"bulkifiée\" contraiterement au reste du code de cette application du projet 12, l'ojectif étant ici de voir une autre façon d'utiliser en utilisant l'Id de l'objet directement dans l'URI Voici un exemple de corps de requète: { \"Status\" : \"Activated\" } createContract() Crée un ou plusieurs contrats en utilisant une requête HTTP POST. Cette méthode récupère les informations de la demande HTTP entrante, y compris les données JSON contenant les détails des contrats à créer. Elle valide et traite les données, puis crée les contrats correspondants dans Salesforce. Elle renvoie une liste d'informations sur les contrats créés, y compris leur ID et l'ID du compte associé. Voici un exemple de corps de requète: { \"records\" : [{ \"AccountId\" : \"0012o00003PqKn1AAF\", \"StartDate\" : \"2023-11-05\", \"Status\" : \"Draft\", \"ContractTerm\" : \"3\" }] } Signature @HttpPost global static List<Map<String, String>> createContract() Returns Une liste de mappages contenant les informations des contrats créés. updateContractFields() Cette méthode met à jour les champs d'un contrat existant en utilisant une requête HTTP PATCH. récupère les informations de la demande HTTP entrante, y compris l'ID du contrat à mettre à jour et les données JSON contenant les nouvelles valeurs des champs. Elle effectue ensuite la mise à jour des champs du contrat et enregistre les modifications dans Salesforce. Cette méthode n'est pas \"bulkifiée\" contraiterement au reste du code de cette application du projet 12, l'ojectif étant ici de voir une autre façon d'utiliser en utilisant l'Id de l'objet directement dans l'URI Voici un exemple de corps de requète: { \"Status\" : \"Activated\" } Signature @HttpPatch global static void updateContractFields()"
    },
    {
        "title": "ContractRestResourceTest",
        "fileName": "ContractRestResourceTest.html",
        "text": "ContractRestResourceTest Signature @isTest private class ContractRestResourceTest ContractRestResourceTest Methods testCreateContract() testUpdateContractFields() testCreateContract() Signature @isTest static void testCreateContract() testUpdateContractFields() Signature @isTest static void testUpdateContractFields()"
    }
];
